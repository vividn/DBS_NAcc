load_file("baseline_values.txt")
// all_tau_vecs.hoc loads the tables used to define the taus for many channels
load_file("all_tau_vecs.hoc")
load_file("synapse_templates.hoc")

begintemplate NAccCell
public is_art
public init
public synlist, connect2target

public soma, node, MYSA, FLUT, STIN
create soma, node[1], MYSA[1], FLUT[1], STIN[1]
public proxdend, middend, distdend
create proxdend[1], middend[1], distdend[1]

public allNode, allMYSA, allFLUT, allSTIN, allAxon
public allProx, allMid, allDist, allDend
public allSecs
objref allNode, allMYSA, allFLUT, allSTIN, allAxon
objref allProx, allMid, allDist, allDend
objref allSecs

objref synlist, leaf, gaba[300], ampa[300], nmda[300]
objref DASyn1

//The definitive List (not SectionList) containing SectionRef's for each section
public s
objref s

strdef filename
objref fid

strdef curline, seg //for reading the file and keeping track of section
objref strf //string functions 

proc init() { //$1 = cell number
	sprint(filename, "axonpts/axon%d.txt",$1)	
	fid = new File(filename)
	fid.ropen()
	
	topol()
	subsets()
	
	model_globals()
	dependent_var()
	
	geom()
	
	//add biophysics
	initsoma()
	initdends()
	initaxon()
	
	//specify biophysical parameters
	initchannels()
	
	geom_nseg()
	synlist = new List()
	leaf = new List()
	
	synloops()
}



proc topol() {
	strf = new StringFunctions()
	s = new List()
	
	axonnodes = fid.scanvar()
	paranodes1 = fid.scanvar()
	paranodes2 = fid.scanvar()
	axoninter = fid.scanvar()
	totalAxon = fid.scanvar()
	nDends = fid.scanvar()
	
	create soma
	create node[axonnodes], MYSA[paranodes1]
	create FLUT[paranodes2], STIN[axoninter]
	create proxdend[nDends], middend[nDends*2], distdend[nDends*4]
		
	//connect everything together
	connect node[0](0), soma(1)

	for i=0, axonnodes-2 {
		connect MYSA[2*i](0), node[i](1)
		connect FLUT[2*i](0), MYSA[2*i](1)
		connect STIN[3*i](0), FLUT[2*i](1)
		connect STIN[3*i+1](0), STIN[3*i](1)
		connect STIN[3*i+2](0), STIN[3*i+1](1)
		connect FLUT[2*i+1](0), STIN[3*i+2](1)
		connect MYSA[2*i+1](0), FLUT[2*i+1](1)
		connect node[i+1](0), MYSA[2*i+1](1)	
	}
	
	for iDend = 0, nDends-1 {
		if ((iDend + 1)/nDends <= 0.5) {
			somaSide = 1
		} else {somaSide = 0}
		connect proxdend[iDend](0), soma(somaSide)
		for iMid = 0,1 {
			connect middend[iDend*2+iMid](0), proxdend[iDend](1)
			
			for iDist = 0,1 {
				connect distdend[iDend*4+iMid*2+iDist](0), middend[iDend*2+iMid](1)
			}
		}
	}
	
	//Add 3d points for the axon sections
	//move to the 3d points section
	curline = ""
	while(strcmp(curline,"//beginpoints\n") != 0) {fid.gets(curline)}
	while(fid.gets(curline) != -1) {
		//get the segment name and array index
		segn = -1
		sscanf(curline,"%[^[{][%d]",seg,&segn)
		
		//grab the two 3d points
		x1 = y1 = z1 = d1 = x2 = y2 = z2 = d2 = 0 
		fid.gets(curline)
		sscanf(curline,"pt3dadd(%lf,%lf,%lf,%lf)",&x1,&y1,&z1,&d1)
		fid.gets(curline)
		sscanf(curline,"pt3dadd(%lf,%lf,%lf,%lf)",&x2,&y2,&z2,&d2)
		
		if (strcmp(seg,"soma") == 0) {
			soma {
				pt3dclear()
				pt3dadd(x1,y1,z1,d1)
				pt3dadd(x2,y2,z2,d2)
				s.append(new SectionRef())
			}
		} else if (strcmp(seg,"node") == 0) {
			node[segn] {
				pt3dclear()
				pt3dadd(x1,y1,z1,d1)
				pt3dadd(x2,y2,z2,d2)
				s.append(new SectionRef())
			}
		} else if (strcmp(seg,"MYSA") == 0) {
			MYSA[segn] {
				pt3dclear()
				pt3dadd(x1,y1,z1,d1)
				pt3dadd(x2,y2,z2,d2)
				s.append(new SectionRef())
			}
		} else if (strcmp(seg,"FLUT") == 0) {
			FLUT[segn] {
				pt3dclear()
				pt3dadd(x1,y1,z1,d1)
				pt3dadd(x2,y2,z2,d2)
				s.append(new SectionRef())
			}
		} else if (strcmp(seg,"STIN") == 0) {
			STIN[segn] {
				pt3dclear()
				pt3dadd(x1,y1,z1,d1)
				pt3dadd(x2,y2,z2,d2)
				s.append(new SectionRef())
			}
		} else if (strcmp(seg,"proxdend") == 0) {
			proxdend[segn] {
				pt3dclear()
				pt3dadd(x1,y1,z1,d1)
				pt3dadd(x2,y2,z2,d2)
				s.append(new SectionRef())
			}
		} else if (strcmp(seg,"middend") == 0) {
			middend[segn] {
				pt3dclear()
				pt3dadd(x1,y1,z1,d1)
				pt3dadd(x2,y2,z2,d2)
				s.append(new SectionRef())
			}
		} else if (strcmp(seg,"distdend") == 0) {
			distdend[segn] {
				pt3dclear()
				pt3dadd(x1,y1,z1,d1)
				pt3dadd(x2,y2,z2,d2)
				s.append(new SectionRef())
			}
		} else {
			print "BAD SECTION"
		}
		
		//skip two lines
		fid.gets(curline)
		fid.gets(curline)
	}
		
	
}

proc subsets() {
	allNode = new SectionList()
	allMYSA = new SectionList()
	allFLUT = new SectionList()
	allSTIN = new SectionList()
	allAxon = new SectionList()
	
	allProx = new SectionList()
	allMid = new SectionList()
	allDist = new SectionList()
	allDend = new SectionList()
	
	allSecs = new SectionList()
	
	forsec "node" {allNode.append() allAxon.append()}
	forsec "MYSA" {allMYSA.append() allAxon.append()}
	forsec "FLUT" {allFLUT.append() allAxon.append()}
	forsec "STIN" {allSTIN.append() allAxon.append()}
	
	forsec "prox" {allProx.append() allDend.append()}
	forsec "mid" {allMid.append() allDend.append()}
	forsec "dist" {allDist.append() allDend.append()}
	
	for i = 0,s.count()-1 {
		s.o(i).sec {allSecs.append()}
	}
}

proc model_globals(){
	//morphological parameters of the soma
	somaD = 16
	
    //morphological parameters of the axon
	fiberD=2            //fiber diameter
	nodelength = 1      //node length
	paralength1 = 3     //MYSA length
    paralength2 = 10    //FLUT length
	space_p1 = 0.002  
	space_p2 = 0.004
	space_i = 0.004

    //electrical parameters of the axon
	rhoa = 0.7e6     // Ohm-um cytoplasmic resistance (was 0.7e6), 1.74e6 Hanson
	mycm = 0.1       // uF/cm2 lamella membrane capacitance (was 0.1)
	mygm = 0.001     // S/cm2 lamella membrane conductance (was 0.001)
	
	//Intracell. ion concentrations are typical mammalian values (from Johnston & Wu, 1999 via NEUORN tutorial)
	ki0_k_ion = 140
	nai0_na_ion = 10

	//Extracell. ion concentrations taken from Nakanishi 1990 (slice bathing solution)
	ko0_k_ion = 6.24
	nao0_na_ion = 150

	//parameters (mho/cm2)

    my_gna_na = 0.02            //Fit according to AP height (0.02)
	my_gna_nal = 2.8e-5         //was 1.8e-5 for in vitro testing

    my_gh_ih = 0.0002           //Nakanishi1990-Fig1A (0.0002)

	my_gk_kdrf = 0.0040         //Kv3.1 (0.0040)
	my_gk_kdrs = 0.0010         //Kv2.1 (0.0010)
    my_gk_skca = 0.00001        //(0.00001)

	my_gcal_hva = 0.0005        //Nakanishi1990-Fig2 (0.0005)
	my_gcan_hva = 0.0020        //Nakanishi1990-Fig2 (0.0020)
}

proc dependent_var() {
	if (fiberD==1) {axonD=0.8 nodeD=0.7 paraD1=0.7 paraD2=0.8 deltax=200 nl=20}
	if (fiberD==2) {axonD=1.6 nodeD=1.4 paraD1=1.4 paraD2=1.6 deltax=200 nl=30}

	Rpn0 = (rhoa*.01)/(PI*((((nodeD/2)+space_p1)^2)-((nodeD/2)^2)))
	Rpn1 = (rhoa*.01)/(PI*((((paraD1/2)+space_p1)^2)-((paraD1/2)^2)))
	Rpn2 = (rhoa*.01)/(PI*((((paraD2/2)+space_p2)^2)-((paraD2/2)^2)))
	Rpx = (rhoa*.01)/(PI*((((axonD/2)+space_i)^2)-((axonD/2)^2)))

	interlength = (deltax-nodelength-(2*paralength1)-(2*paralength2))/6
}

proc geom() {
	soma {diam = 16}
	forsec allProx {diam = 2.25}
	forsec allMid {diam = 1.10}
	forsec allDist {diam = 0.72}
	forsec allNode {diam = nodeD}
	forsec allMYSA {diam = paraD1}
	forsec allFLUT {diam = paraD2}
	forsec allSTIN {diam = axonD}
}	

proc initsoma() {
	soma {		
		insert pas

		insert naf
		insert nap

		insert kir
		insert kas
		insert kaf
		insert krp
		insert bkkca
		insert skkca
		
		insert caldyn
		insert caL
		insert caL13

		insert cadyn
		insert can
		insert caq
		insert car	
		insert cat
		
		
		insert extracellular xraxial=1e+09 xg=1e+09 xc=0		
	}
}

proc initdends() {
	forsec allDend{
		insert pas

		insert naf
		insert nap

		insert kir
		insert kas
		insert kaf
		insert bkkca
		insert skkca

		insert caldyn
		insert caL
		insert caL13

		insert cadyn
		insert can
		insert caq
		insert car
		insert cat
	}
}
	
	

proc initaxon() {		
	forsec allNode {
		insert axnode70
		insert extracellular xraxial=Rpn0 xg=1e10 xc=0
	}
    node[axonnodes-1] { //Last node has some differences to avoid edge effects 
		uninsert axnode70
		insert pas
	}
	
	forsec allMYSA {
		insert pas
		insert extracellular xraxial=Rpn1 xg=mygm/(nl*2) xc=mycm/(nl*2)
	}
	
	forsec allFLUT {
		insert parak70
		insert pas
		insert extracellular xraxial=Rpn2 xg=mygm/(nl*2) xc=mycm/(nl*2)
	}
	
	forsec allSTIN {
		insert pas
		insert extracellular xraxial=Rpx xg=mygm/(nl*2) xc=mycm/(nl*2)
		
	}
}

proc initchannels(){
	forsec allSecs {
		if (ismembrane("pas")) {g_pas = G_PAS}
		
		if (ismembrane("kir")) {gkbar_kir = G_KIR}
		if (ismembrane("krp")) {gkbar_krp = G_KRP}
		if(ismembrane("bkkca")) {gkbar_bkkca = G_BKKCA}
		if(ismembrane("skkca")) {gkbar_skkca = G_SKKCA}
		
		if (ismembrane("caL")) {pbar_caL = P_CAL}
		if (ismembrane("caL13")) {pcaLbar_caL13 = P_CAL13}
		if (ismembrane("can")) {pbar_can = P_CAN}
		if (ismembrane("caq")) {pcaqbar_caq = P_CAQ}
		if (ismembrane("car")) {pcarbar_car = P_CAR}
		if (ismembrane("cat")) {pcatbar_cat = P_CAT}
		
		if (ismembrane("cadyn")) {
			cainf_cadyn = CA_INF
			taur_cadyn = CA_TAUR
			drive_cadyn = CA_DRIVE
			pump_cadyn = CA_PUMP
			}
		if (ismembrane("caldyn")) {
			cainf_caldyn = CA_INF
			taur_caldyn = CA_TAUR
			drive_caldyn = CA_DRIVE
			pump_caldyn = CA_PUMP
			}
			
		ek = EK
	}
	
	soma {
		gnabar_naf = G_NAF
		gnabar_nap = G_NAP
		gkbar_kas = G_KAS
		gkbar_kaf = G_KAF
	}
	forsec allProx {
		gnabar_naf = G_NAFD
		gnabar_nap = G_NAPD
		gkbar_kas = G_KAS
		gkbar_kaf = G_KAF
	}
	forsec allMid {
		gnabar_naf = G_NAFD
		gnabar_nap = G_NAPD
		gkbar_kas = G_KASD
		gkbar_kaf = G_KAFD
	}
	
	forsec allDist {
		gnabar_naf = G_NAFD
		gnabar_nap = G_NAPD
		gkbar_kas = G_KASD
		gkbar_kaf = G_KAFD
	}
}
		

//**********
// use d_lambda function (see neuron website) to assign segments/nodes

func lambda_f() { local i, x1, x2, d1, d2, lam
        if (n3d() < 2) {
                return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
        }
		// above was too inaccurate with large variation in 3d diameter
		// so now we use all 3-d points to get a better approximate lambda

        x1 = arc3d(0)
        d1 = diam3d(0)
        lam = 0
        for i=1, n3d()-1 {
                x2 = arc3d(i)
                d2 = diam3d(i)
                lam += (x2 - x1)/sqrt(d1 + d2)
                x1 = x2   d1 = d2
        }

        //  length of the section in units of lambda
        lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)

        return L/lam
}

proc geom_nseg() {
	freq = 100      // Hz, frequency at which AC length constant will be computed
	d_lambda = 0.15

	forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }
}
//**********


proc connect2target() { //$o1 target point process, $o2 returned NetCon
  soma $o2 = new NetCon(&v(1), $o1)
}

func is_art() { return 0 }

proc synloops() {
	//***************************
	//Build synapses
	// Soma: 0 AMPA, 0 NMDA, 16 GABA
	soma {
		nAMPA = 0
		nNMDA = 0
		nGABA = 16
		
		for i = 0,nAMPA-1 {
			onode = (i+1)/(nAMPA + 1)
			ampa[i] = new AMPAt(0.5)
			synlist.append(ampa[i])
		}
		
		for i = 0,nNMDA-1 {
			onode = (i+1)/(nNMDA + 1)
			nmda[i] = new NMDAt(0.5)
			synlist.append(nmda[i])
		}
		
		for i = 0,nGABA-1 {
			onode = (i+1)/(nGABA + 1)
			gaba[i] = new GABAt(0.5)
			synlist.append(gaba[i])
		}
	}
	// Prox Dend: 1 AMPA, 1 NMDA, 3 GABA
	forsec allProx {
		nAMPA = 1
		nNMDA = 1
		nGABA = 3
		
		for i = 0,nAMPA-1 {
			onode = (i+1)/(nAMPA + 1)
			ampa[i] = new AMPAt(0.5)
			synlist.append(ampa[i])
		}
		
		for i = 0,nNMDA-1 {
			onode = (i+1)/(nNMDA + 1)
			nmda[i] = new NMDAt(0.5)
			synlist.append(nmda[i])
		}
		
		for i = 0,nGABA-1 {
			onode = (i+1)/(nGABA + 1)
			gaba[i] = new GABAt(0.5)
			synlist.append(gaba[i])
		}
	}
	
	// Mid Dend: 2 AMPA, 2 NMDA, 3 GABA
	forsec allMid {
		nAMPA = 2
		nNMDA = 2
		nGABA = 3
		
		for i = 0,nAMPA-1 {
			onode = (i+1)/(nAMPA + 1)
			ampa[i] = new AMPAt(0.5)
			synlist.append(ampa[i])
		}
		
		for i = 0,nNMDA-1 {
			onode = (i+1)/(nNMDA + 1)
			nmda[i] = new NMDAt(0.5)
			synlist.append(nmda[i])
		}
		
		for i = 0,nGABA-1 {
			onode = (i+1)/(nGABA + 1)
			gaba[i] = new GABAt(0.5)
			synlist.append(gaba[i])
		}
	}
	
	// Dist Dend: 4 AMPA, 4 NMDA, 2 GABA
	forsec allDist {
		nAMPA = 4
		nNMDA = 4
		nGABA = 2
		
		for i = 0,nAMPA-1 {
			onode = (i+1)/(nAMPA + 1)
			ampa[i] = new AMPAt(0.5)
			synlist.append(ampa[i])
		}
		
		for i = 0,nNMDA-1 {
			onode = (i+1)/(nNMDA + 1)
			nmda[i] = new NMDAt(0.5)
			synlist.append(nmda[i])
		}
		
		for i = 0,nGABA-1 {
			onode = (i+1)/(nGABA + 1)
			gaba[i] = new GABAt(0.5)
			synlist.append(gaba[i])
		}
	}
}
	


endtemplate NAccCell